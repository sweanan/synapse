{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "swetha-synapse"
		},
		"SwethaTaxisLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SwethaTaxisLS'"
		},
		"TaxiStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TaxiStorage'"
		},
		"pcap_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pcap'"
		},
		"pcapResult_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'pcapResult'"
		},
		"swetha-synapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'swetha-synapse-WorkspaceDefaultSqlServer'"
		},
		"AzureBatch1_accessKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accessKey' of 'AzureBatch1'"
		},
		"nyc_tlc_yellow_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_yellow'"
		},
		"pcapResult_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://swethataxidatalake.dfs.core.windows.net"
		},
		"swetha-synapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://swethataxidatalake.dfs.core.windows.net"
		},
		"us-decennial-census-zip_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'us-decennial-census-zip'"
		},
		"AzureBatch1_properties_typeProperties_batchUri": {
			"type": "string",
			"defaultValue": "https://azurebatch.eastus.batch.azure.com"
		},
		"AzureBatch1_properties_typeProperties_poolName": {
			"type": "string",
			"defaultValue": "mypool"
		},
		"AzureBatch1_properties_typeProperties_accountName": {
			"type": "string",
			"defaultValue": "azurebatch"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/SwethaSparkPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/testSparkpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Adding Notebook to Pipline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Exploration Notebook",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Exploration Notebook",
								"type": "NotebookReference"
							},
							"parameters": {
								"runId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-09T16:06:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Exploration Notebook')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Process Dimensions')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dim RateCodes",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RateCodeId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "RateCodeId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "RateCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RateCode",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IsApproved",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "IsApproved",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RateCodesSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RateCodesParquetDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-08T21:37:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/RateCodesSqlDataset')]",
				"[concat(variables('workspaceId'), '/datasets/RateCodesParquetDataset')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Process Facts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Fact GreenTaxis",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Fact GreenTaxis",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GreenTaxis": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-08T21:52:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Fact GreenTaxis')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_m8p')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pcapResult",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "yumatestPcap",
						"fileSystem": "pcapuncompressed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pcapResult')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GreenTaxiCsvDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TaxiStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "GreenTaxis_201911.csv",
						"container": "taxisource"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TaxiStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GreenTaxiParquetDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "swetha-synapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Facts/GreenTaxis.parque",
						"fileSystem": "taxioutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/swetha-synapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RateCodesParquetDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "swetha-synapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "RateCodes.parquet",
						"folderPath": "Dimensions",
						"fileSystem": "taxioutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/swetha-synapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RateCodesSqlDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SwethaTaxisLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "RateCodeId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RateCode",
						"type": "varchar"
					},
					{
						"name": "IsApproved",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "RateCodes"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SwethaTaxisLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_0qe')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pcap",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rpl-dio-mc-nsa-optional-tlv-dissector-sample.pcap.gz",
						"container": "pcap"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pcap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_a2t')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pcap",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rpl-dio-mc-nsa-optional-tlv-dissector-sample.pcap.gz",
						"container": "pcap"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pcap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_dea')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pcap",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rpl-dio-mc-nsa-optional-tlv-dissector-sample.pcap.gz",
						"container": "pcap"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pcap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_jck')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pcap",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "test.pcapng",
						"folderPath": "yumaTestPcapfiles",
						"container": "pcap"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pcap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_m8p')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pcap",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "test.pcapng",
						"folderPath": "yumaTestPcapfiles",
						"container": "pcap"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pcap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_p89')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TaxiStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ipv4frags.pcap",
						"container": "taxisource"
					},
					"compression": {
						"type": "GZip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TaxiStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_r51')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pcap",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ipv4frags.pcap",
						"container": "pcap"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pcap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_t66')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pcap",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ipv4frags.pcap",
						"container": "pcap"
					},
					"compression": {
						"type": "GZip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pcap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SwethaTaxisLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SwethaTaxisLS_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TaxiStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('TaxiStorage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_yellow')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_yellow_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pcap')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('pcap_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pcapResult')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('pcapResult_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('pcapResult_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/swetha-synapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('swetha-synapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/swetha-synapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('swetha-synapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/us-decennial-census-zip')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('us-decennial-census-zip_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Fact GreenTaxis')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GreenTaxiCsvDataset",
								"type": "DatasetReference"
							},
							"name": "GreenTaxis"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GreenTaxiParquetDataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "RenamedColumns"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tVendorID as short,\n\t\tlpep_pickup_datetime as timestamp,\n\t\tlpep_dropoff_datetime as timestamp,\n\t\tstore_and_fwd_flag as boolean,\n\t\tRatecodeID as short,\n\t\tPULocationID as short,\n\t\tDOLocationID as short,\n\t\tpassenger_count as short,\n\t\ttrip_distance as double,\n\t\tfare_amount as double,\n\t\textra as double,\n\t\tmta_tax as double,\n\t\ttip_amount as double,\n\t\ttolls_amount as double,\n\t\tehail_fee as string,\n\t\timprovement_surcharge as double,\n\t\ttotal_amount as double,\n\t\tpayment_type as short,\n\t\ttrip_type as short,\n\t\tcongestion_surcharge as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> GreenTaxis\nGreenTaxis select(mapColumn(\n\t\tVendorID,\n\t\tPickUpTime = lpep_pickup_datetime,\n\t\tDropOffTime = lpep_dropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\tRatecodeID,\n\t\tPickUpLocationID = PULocationID,\n\t\tDropOffLocationID = DOLocationID,\n\t\tPassengerCount = passenger_count,\n\t\tTripDistance = trip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type,\n\t\ttrip_type,\n\t\tcongestion_surcharge\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenamedColumns\nRenamedColumns derive(TripYear = year(PickUpTime)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/GreenTaxiCsvDataset')]",
				"[concat(variables('workspaceId'), '/datasets/GreenTaxiParquetDataset')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/COPY statement - sql script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'TaxiZonesCopy' AND O.TYPE = 'U' AND S.NAME = 'main')\nCREATE TABLE TaxiZonesCopy\n\t(\n\t [LocationID] bigint,\n\t [Borough] nvarchar(500),\n\t [Zone] nvarchar(500),\n\t [service_zone] nvarchar(500)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_TaxiZonesCopy\n--AS\n--BEGIN\nCOPY INTO TaxiZonesCopy\n(LocationID 1, Borough 2, Zone 3, service_zone 4)\nFROM 'https://swethataxidatalake.dfs.core.windows.net/taxidata/TaxiZones/*.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 10\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://swethataxidatalake.dfs.core.windows.net/taxidata/ErrorRows/TaxiZones/'\n)\n--END\nGO\n\nSELECT TOP 100 * FROM TaxiZonesCopy\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TaxiWarehouse",
						"poolName": "TaxiWarehouse"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Distribution types')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- create RoundRobin table for TaxiZonesCopy\nCREATE TABLE Taxi_RoundRobin\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN\n)\nAS\nSELECT *\nFROM TaxiZonesCopy\n\n-- Check the distribution data\nDBCC PDW_SHOWSPACEUSED('Taxi_RoundRobin')\n\n\n-- create Hash Distributions table for TaxiZonesCopy\nCREATE TABLE Taxi_Hash\nWITH\n(\n    DISTRIBUTION = HASH(LocationID)\n)\nAS\nSELECT *\nFROM TaxiZonesCopy\n\n-- Check the distribution data\nDBCC PDW_SHOWSPACEUSED('Taxi_Hash')\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TaxiWarehouse",
						"poolName": "TaxiWarehouse"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/taxi zones - external table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create master key\n-- DROP MASTER KEY;\n-- GO\n\nCREATE MASTER KEY;\nGO\n\n\n-- Create credential to access Data Lake\nCREATE DATABASE SCOPED CREDENTIAL SA4DataLakeCredential\nWITH \n\tIDENTITY = 'user', \n\tSecret = 'xhsez5R6b49o4hrol/yG2fDa8V1OCHdHo/6QJ0wa5qM5l3Zic3CLhg+LrvfmtdJehO0bw+2BFz3Cvt8wEoNaEg==';\nGO\n\n-- Create external data source, pointing to Data Lake\nCREATE EXTERNAL DATA SOURCE SA4DataLake\nwith (  \n      TYPE = HADOOP,\n      LOCATION ='abfss://taxidata@swethataxidatalake.dfs.core.windows.net',  \n      CREDENTIAL = SA4DataLakeCredential  \n);  \nGO\n\n-- Create external file format\nCREATE EXTERNAL FILE FORMAT CSVFileFormat4\nWITH \n(   FORMAT_TYPE = DELIMITEDTEXT\n,   FORMAT_OPTIONS  \n\t(   \n\t\tFIELD_TERMINATOR   = ','\n\t\t, STRING_DELIMITER = '\"'\n        , DATE_FORMAT      = 'yyyy-MM-dd HH:mm:ss'\n        , USE_TYPE_DEFAULT = FALSE\n        , FIRST_ROW  = 2\n    )\n);\nGO\n\n-- Create schema for external resources\nCREATE SCHEMA ext4\nGO\n\n--Recreate it if already present\nDROP EXTERNAL TABLE ext4.TaxiZones\n\n-- Create external table for Taxi Zones\nCREATE EXTERNAL TABLE ext4.TaxiZones\n(\n\tLocationId INT,\n\tBorough NVARCHAR(100),\n\tZone NVARCHAR(100),\n    ServiceZone NVARCHAR(100)\n)\nWITH\n(\n    DATA_SOURCE = SA4DataLake\n  , FILE_FORMAT = CSVFileFormat4\n  , LOCATION='/TaxiZones/TaxiZones1.csv'  \n)\nGO\n\nSELECT * FROM ext4.TaxiZones\nGO\n\n-- -- Drop external table\n-- DROP EXTERNAL TABLE ext3.TaxiZones\n\n-- -- Recreate external table\n-- CREATE EXTERNAL TABLE ext3.TaxiZones\n-- (\n-- \tLocationId INT,\n-- \tBorough NVARCHAR(100),\n-- \tZone NVARCHAR(100),\n--     ServiceZone NVARCHAR(100)\n-- )\n-- WITH\n-- (\n--     DATA_SOURCE = SA3DataLake\n--   , FILE_FORMAT = CSVFileFormat3\n--   , LOCATION='/TaxiZones/'    \n--   , REJECT_TYPE = VALUE\n--   , REJECT_VALUE = 1\n--   , REJECTED_ROW_LOCATION='/Errors/TaxiZones'\n-- )\n-- GO\n\n-- SELECT * FROM ext3.TaxiZones",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TaxiWarehouse",
						"poolName": "TaxiWarehouse"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Exploration Notebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SwethaSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c21c0101-effa-45e4-a518-765499e8a700"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/047a4628-7ce2-4a47-b261-6ca35c95a0c1/resourceGroups/DemoStorageAccount/providers/Microsoft.Synapse/workspaces/swetha-synapse/bigDataPools/SwethaSparkPool",
						"name": "SwethaSparkPool",
						"type": "Spark",
						"endpoint": "https://swetha-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SwethaSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"\"Hello World\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sum = 1+1\r\n",
							"print(sum)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Process FHV data')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SwethaSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7ac240e0-4f01-4402-a7a2-4d6223308a10"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/047a4628-7ce2-4a47-b261-6ca35c95a0c1/resourceGroups/DemoStorageAccount/providers/Microsoft.Synapse/workspaces/swetha-synapse/bigDataPools/SwethaSparkPool",
						"name": "SwethaSparkPool",
						"type": "Spark",
						"endpoint": "https://swetha-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SwethaSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# Create file path variable\r\n",
							"fhvTaxisFilePath = 'abfss://taxidata@swethataxidatalake.dfs.core.windows.net/FhvTaxis*.csv'"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read FHV Taxis data\r\n",
							"\r\n",
							"fhvTaxiTripDataDF = (\r\n",
							"                        spark\r\n",
							"                            .read\r\n",
							"\r\n",
							"                            .option(\"header\", \"true\")\r\n",
							"                            .option(\"inferSchema\", \"true\")\r\n",
							"\r\n",
							"                            .csv(fhvTaxisFilePath)\r\n",
							"                    )\r\n",
							"\r\n",
							"fhvTaxiTripDataDF.printSchema"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Display FHV Taxis data\r\n",
							"\r\n",
							"display(\r\n",
							"    fhvTaxiTripDataDF.limit(10)\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"#Display summary of FHV Taxis\r\n",
							"\r\n",
							"display(\r\n",
							"    fhvTaxiTripDataDF,\r\n",
							"    summary=True\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Select only limited columns\r\n",
							"\r\n",
							"fhvTaxiTripDataDF = (\r\n",
							"                        fhvTaxiTripDataDF\r\n",
							"                            .select(\r\n",
							"                                    \"hvfhs_license_num\",\r\n",
							"                                    \"dispatching_base_num\",\r\n",
							"                                    \"Pickup_DateTime\", \r\n",
							"                                    \"DropOff_DateTime\", \r\n",
							"                                    \"PUlocationID\", \r\n",
							"                                    \"DOlocationID\"                                    \r\n",
							"                                )\r\n",
							"                    )\r\n",
							"\r\n",
							"fhvTaxiTripDataDF.printSchema"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(\r\n",
							"    fhvTaxiTripDataDF.limit(10)\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Rename the columns\r\n",
							"\r\n",
							"fhvTaxiTripDataDF = (\r\n",
							"                        fhvTaxiTripDataDF\r\n",
							"                            .withColumnRenamed(\"hvfhs_license_num\", \"CompanyLicenseId\")\r\n",
							"                            .withColumnRenamed(\"dispatching_base_num\", \"BaseLicenseId\")\r\n",
							"                            .withColumnRenamed(\"Pickup_DateTime\", \"PickupTime\")\r\n",
							"                            .withColumnRenamed(\"DropOff_DateTime\", \"DropTime\")\r\n",
							"                            .withColumnRenamed(\"PUlocationID\", \"PickupLocationId\")\r\n",
							"                            .withColumnRenamed(\"DOlocationID\", \"DropLocationId\")                            \r\n",
							"                    )\r\n",
							"\r\n",
							"fhvTaxiTripDataDF.printSchema"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(\r\n",
							"    fhvTaxiTripDataDF.limit(10)\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"# Create derived columns for year, month and day\r\n",
							"fhvTaxiTripDataDF = (\r\n",
							"                        fhvTaxiTripDataDF\r\n",
							"                            .withColumn(\"TripYear\", year(col(\"PickupTime\")))\r\n",
							"                            .withColumn(\"TripMonth\", month(col(\"PickupTime\")))\r\n",
							"                            .withColumn(\"TripDay\", dayofmonth(col(\"PickupTime\")))\r\n",
							"                    )\r\n",
							"\r\n",
							"fhvTaxiTripDataDF.printSchema"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(\r\n",
							"    fhvTaxiTripDataDF.limit(10)\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Filter inaccurate data\r\n",
							"\r\n",
							"# fhvTaxiTripDataDF = (\r\n",
							"#                         fhvTaxiTripDataDF\r\n",
							"#                             .where(\"PickupTime >= '2019-11-01' AND PickupTime < '2019-12-01'\")\r\n",
							"#                     )\r\n",
							"\r\n",
							"\r\n",
							"# display(fhvTaxiTripDataDF.limit(100))"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create file path variable\r\n",
							"\r\n",
							"fhvBasesFilePath = 'abfss://taxidata@swethataxidatalake.dfs.core.windows.net/FhvBases.json'"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Read FHV Bases json file\r\n",
							"\r\n",
							"fhvBasesDF = (\r\n",
							"                spark\r\n",
							"                  .read\r\n",
							"                  .option(\"multiline\", \"true\")\r\n",
							"                  .json(fhvBasesFilePath)\r\n",
							"             )\r\n",
							"\r\n",
							"display(fhvBasesDF)"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"# Flatten FHV Bases data\r\n",
							"\r\n",
							"fhvBasesFlatDF = (\r\n",
							"                    fhvBasesDF\r\n",
							"                        .select(\r\n",
							"                                    col(\"License Number\").alias(\"BaseLicenseId\"),\r\n",
							"                                    col(\"Type of Base\").alias(\"BaseType\"),\r\n",
							"\r\n",
							"                                    col(\"Address.Building\").alias(\"AddressBuilding\"),\r\n",
							"                                    col(\"Address.Street\").alias(\"AddressStreet\"),\r\n",
							"                                    col(\"Address.City\").alias(\"AddressCity\"),\r\n",
							"                                    col(\"Address.State\").alias(\"AddressState\"),\r\n",
							"                                    col(\"Address.PostCode\").alias(\"AddressPostalCode\")\r\n",
							"                               )\r\n",
							"                )\r\n",
							"\r\n",
							"display(fhvBasesFlatDF)"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Create a dataframe joining FHV trip data with bases\r\n",
							"\r\n",
							"fhvTaxiTripDataWithBasesDF = (\r\n",
							"                                fhvTaxiTripDataDF\r\n",
							"                                     .join(fhvBasesFlatDF,                                               \r\n",
							"                                               \"BaseLicenseId\",\r\n",
							"                                                \"inner\"\r\n",
							"                                          )\r\n",
							"                             )\r\n",
							"\r\n",
							"display(fhvTaxiTripDataWithBasesDF)"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE DATABASE FhvWarehouse1"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(\r\n",
							"    fhvTaxiTripDataDF\r\n",
							"        .write\r\n",
							"        .partitionBy(\"TripYear\", \"TripMonth\", \"TripDay\")\r\n",
							"        .mode(\"overwrite\")\r\n",
							"        .parquet(\"abfss://taxidata@swethataxidatalake.dfs.core.windows.net/Facts/FhvTaxis.parquet\")\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(\r\n",
							"    fhvTaxiTripDataDF\r\n",
							"        .write\r\n",
							"        .partitionBy(\"TripYear\", \"TripMonth\", \"TripDay\")\r\n",
							"        .mode(\"overwrite\")\r\n",
							"        .saveAsTable(\"fhvwarehouse.FHVTripsManaged\")\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(\r\n",
							"    fhvTaxiTripDataDF\r\n",
							"        .write\r\n",
							"        .partitionBy(\"TripYear\", \"TripMonth\", \"TripDay\")\r\n",
							"        .mode(\"overwrite\")\r\n",
							"        .option(\"path\", \"abfss://taxidata@swethataxidatalake.dfs.core.windows.net/Facts/FhvTaxis.parquet\")\r\n",
							"        .saveAsTable(\"fhvwarehouse.FHVTrips\")\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 56
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/open pcap file')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SwethaSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "046ef725-b189-440d-822a-d2962a581f12"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/047a4628-7ce2-4a47-b261-6ca35c95a0c1/resourceGroups/DemoStorageAccount/providers/Microsoft.Synapse/workspaces/swetha-synapse/bigDataPools/SwethaSparkPool",
						"name": "SwethaSparkPool",
						"type": "Spark",
						"endpoint": "https://swetha-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SwethaSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# file = 'https://swethataxidatalake.dfs.core.windows.net/pcapuncompressed/ipv4frags.pcap'\r\n",
							"\r\n",
							"file = 'abfss://pcapuncompressed@swethataxidatalake.dfs.core.windows.net/ipv4frags.pcap'"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import os"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"os.system ('tshark -r'+file +'>'+ file +'.txt')"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df = spark.read.format(\"pcap\").option(\"inferSchema\", \"true\").option(\"inferSchema\", \"true\").load(file)\r\n",
							"# display(df)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# import dpkt\r\n",
							"# f = open(file)\r\n",
							"# pcap = dpkt.pcap.Reader(f)"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark pool reading data from dedicated pool')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SwethaSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b3df5b02-7335-4fe1-a216-eaf2add724a1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/047a4628-7ce2-4a47-b261-6ca35c95a0c1/resourceGroups/DemoStorageAccount/providers/Microsoft.Synapse/workspaces/swetha-synapse/bigDataPools/SwethaSparkPool",
						"name": "SwethaSparkPool",
						"type": "Spark",
						"endpoint": "https://swetha-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SwethaSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val df = spark.read.synapsesql(\"TaxiWarehouse.dbo.TaxiZonesCopy\") \n",
							"\n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"// From psark to write to dedicated sql\r\n",
							"\r\n",
							"%%spark\r\n",
							"// Make sure the name of the SQL pool (SQLPool01 below) matches the name of your SQL pool.\r\n",
							"val df = spark.sqlContext.sql(\"select * from xxx\")\r\n",
							"df.write.sqlanalytics(\"SQLPool01.wwi.TopPurchases\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rates')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TaxiWarehouse')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pandas read-write from blob storage')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testSparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "405f2caa-6701-410d-9d8b-d32d1429fb24"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/047a4628-7ce2-4a47-b261-6ca35c95a0c1/resourceGroups/DemoStorageAccount/providers/Microsoft.Synapse/workspaces/swetha-synapse/bigDataPools/testSparkpool",
						"name": "testSparkpool",
						"type": "Spark",
						"endpoint": "https://swetha-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testSparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false
							}
						},
						"source": [
							"import pandas\r\n",
							"\r\n",
							"import pkg_resources\r\n",
							"for d in pkg_resources.working_set:\r\n",
							"     print(d)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# pandas read from blob storage\r\n",
							"df = pandas.read_csv('abfss://taxisource@swethademostorageaccount.dfs.core.windows.net/GreenTaxis_201911.csv',\r\n",
							"storage_options = {'account_key' : '4mDMVa29BJRrAsvlsmHX8tDIBYVUg7/y5nlwpPUIW5RAdm0leRWfmuNKjkgLjLEiQeB89dh7/L4cmzdUnrN8Kw=='})\r\n",
							"\r\n",
							"# display(df)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas\r\n",
							"df1 = pandas.DataFrame({'VendorID': [2.0,2.0], 'RatecodeID' :[1.0,5.0]})\r\n",
							"df1.to_csv('abfss://taxisource@swethademostorageaccount.dfs.core.windows.net/GreenTaxis1.csv',\r\n",
							"storage_options = {'account_key' : '4mDMVa29BJRrAsvlsmHX8tDIBYVUg7/y5nlwpPUIW5RAdm0leRWfmuNKjkgLjLEiQeB89dh7/L4cmzdUnrN8Kw=='})"
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Process pcapng')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testSparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6dee615b-cf16-4053-90c7-eda204456a6e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/047a4628-7ce2-4a47-b261-6ca35c95a0c1/resourceGroups/DemoStorageAccount/providers/Microsoft.Synapse/workspaces/swetha-synapse/bigDataPools/testSparkpool",
						"name": "testSparkpool",
						"type": "Spark",
						"endpoint": "https://swetha-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testSparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# res = subprocess.run(tshark_command, shell=True, capture_output=True, check=True)\r\n",
							"# display(pcapngFile)\r\n",
							"\r\n",
							"import dpkt\r\n",
							"import pandas\r\n",
							"#  ('abfss://pcap@swethademostorageaccount.dfs.core.windows.net/yumaTestPcapfiles/test.pcapng',\r\n",
							"# storage_options = {'account_key' : '4mDMVa29BJRrAsvlsmHX8tDIBYVUg7/y5nlwpPUIW5RAdm0leRWfmuNKjkgLjLEiQeB89dh7/L4cmzdUnrN8Kw=='})\r\n",
							"\r\n",
							"from azure.storage.blob import BlobServiceClient\r\n",
							"\r\n",
							"# service_client = BlobServiceClient(\r\n",
							"# 'abfss://pcap@swethademostorageaccount.dfs.core.windows.net/yumaTestPcapfiles/test.pcapng',\r\n",
							"# '4mDMVa29BJRrAsvlsmHX8tDIBYVUg7/y5nlwpPUIW5RAdm0leRWfmuNKjkgLjLEiQeB89dh7/L4cmzdUnrN8Kw==')\r\n",
							"\r\n",
							"\r\n",
							"# f = open(pcapngFile)"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from azure.storage.blob import BlobClient\r\n",
							"blob = BlobClient(account_url=\"https://swethademostorageaccount.blob.core.windows.net\",\r\n",
							"                  container_name=\"pcap\",\r\n",
							"                  blob_name=\"test.pcapng\",\r\n",
							"                  credential=\"4mDMVa29BJRrAsvlsmHX8tDIBYVUg7/y5nlwpPUIW5RAdm0leRWfmuNKjkgLjLEiQeB89dh7/L4cmzdUnrN8Kw==\")\r\n",
							"\r\n",
							"# blob = BlobClient(account_url= 'abfss://pcap@swethademostorageaccount.dfs.core.windows.net/yumaTestPcapfiles/test.pcapng',\r\n",
							"#                  container_name=\"pcap\",\r\n",
							"#                  blob_name=\"test.pcapng\",\r\n",
							"#                  credential=\"4mDMVa29BJRrAsvlsmHX8tDIBYVUg7/y5nlwpPUIW5RAdm0leRWfmuNKjkgLjLEiQeB89dh7/L4cmzdUnrN8Kw==\")"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"data = blob.download_blob().read\r\n",
							"data.summary\r\n",
							"# DEST_FILE = './mytest.pcapng'\r\n",
							"\r\n",
							"# res = subprocess.run(tshark_command, shell=True, capture_output=True, check=True)\r\n",
							"# with open( , \"rb\") as my_blob:\r\n",
							"#     blob_data = blob.download_blob()\r\n",
							"#     blob_data.readinto(my_blob)"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import os,subprocess\r\n",
							"# pcapngFile = 'abfss://pcapuncompressed@swethataxidatalake.dfs.core.windows.net/ipv4frags.pcap'\r\n",
							"\r\n",
							"tempPcapngCSVfile = 'temp.csv'\r\n",
							"baseRawPcapDataTableName = \"PCAP_LEVEL1_DATA_JD_\"\r\n",
							"tableName = baseRawPcapDataTableName"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tshark_filter = 'data!=\"\"'\r\n",
							"tshark_fields = \"-eframe.time_epoch -eframe.time -eip.src -eip.dst -eeth.src -eeth.dst -eudp.srcport -eudp.dstport -edata\"\r\n",
							"tshark_command = f\"tshark -r '{data}' -Tfields {tshark_fields} -R '{tshark_filter}' -2 > '{tempPcapngCSVfile}'\"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tempPcapngCSVfile.count()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 35
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "mybatch",
						"type": "Custom",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"command": "tshark -r test.pcap -T fields, -e eth.dst -e data > thursday-100M.csv",
							"resourceLinkedService": {
								"referenceName": "pcap",
								"type": "LinkedServiceReference"
							},
							"folderPath": "pcap/yumaTestPcapfiles",
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureBatch1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBatch1')]",
				"[concat(variables('workspaceId'), '/linkedServices/pcap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBatch1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBatch",
				"typeProperties": {
					"batchUri": "[parameters('AzureBatch1_properties_typeProperties_batchUri')]",
					"poolName": "[parameters('AzureBatch1_properties_typeProperties_poolName')]",
					"accountName": "[parameters('AzureBatch1_properties_typeProperties_accountName')]",
					"linkedServiceName": {
						"referenceName": "pcap",
						"type": "LinkedServiceReference"
					},
					"accessKey": {
						"type": "SecureString",
						"value": "[parameters('AzureBatch1_accessKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pcap')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		}
	]
}